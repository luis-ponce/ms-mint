{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Metabolomics INTegrator (MINT) MINT (Metabolomics Integrator) is an app for post-processing of files from liquid chromatography-mass spectrometry (LCMS) experiments. MINT can read mzML and mzXML formats. Its main function is to sum up intensity values from pre-defined windows in mass over charge (m/z) and retention time (RT) space. These windows can be provided in form of a peaklist or created interactively in the GUI . With this setup large numbers of LCMS-files can be processed automatically, standardized and perfectly reproducible. The tool can be used with a browser based graphical user interface (GUI) implemented as interactive dashboard with Plotly-Dash . Alternatively, the ms_mint package can be imported as python library to be integrated in any regular Python code as part of a larger processing pipeline or interacively in the Jupyter Notebook .","title":"Home"},{"location":"#metabolomics-integrator-mint","text":"MINT (Metabolomics Integrator) is an app for post-processing of files from liquid chromatography-mass spectrometry (LCMS) experiments. MINT can read mzML and mzXML formats. Its main function is to sum up intensity values from pre-defined windows in mass over charge (m/z) and retention time (RT) space. These windows can be provided in form of a peaklist or created interactively in the GUI . With this setup large numbers of LCMS-files can be processed automatically, standardized and perfectly reproducible. The tool can be used with a browser based graphical user interface (GUI) implemented as interactive dashboard with Plotly-Dash . Alternatively, the ms_mint package can be imported as python library to be integrated in any regular Python code as part of a larger processing pipeline or interacively in the Jupyter Notebook .","title":"Metabolomics INTegrator (MINT)"},{"location":"gui/","text":"The MINT GUI The app's frontend is build using Plotly-Dash and runs locally in a browser. Thought, the Python functions provided can be imported and used in any Python project independently. The GUI is under active development and might be changed in the future. Select Peaklist File(s) A user defined peaklist can be selected and used with the SELECT PEAKLIST FILE(S) button. Peaklists are explained in more detail here . Add MS-files Individual files can be added to an in worklist using the ADD FILE(S) button. If the checkbox Add files from directory is checked, all files from a directory and its subdirectories are imported that end on mzXML or mzML . The box is checked by default. Note that files are always added to the worklist. The worklist can be cleared with the RESET button. Reset Clicking the RESET button will delete current results and remove all selected files. Run The number of cores used for MINT can be selected with the Select number of cores slider. The maximum number shown here depends on the computer on which MINT is running. The RUN button starts mint and a progress bar monitors the progress and can be used to estimate the remaining time. Export Once generated Mint results can be exported by clicking on the EXPORT button. An Excel file is generated which is described in more detail here . Interactive elements Interative Results Table Heatmap Tool","title":"GUI"},{"location":"gui/#the-mint-gui","text":"The app's frontend is build using Plotly-Dash and runs locally in a browser. Thought, the Python functions provided can be imported and used in any Python project independently. The GUI is under active development and might be changed in the future.","title":"The MINT GUI"},{"location":"gui/#select-peaklist-files","text":"A user defined peaklist can be selected and used with the SELECT PEAKLIST FILE(S) button. Peaklists are explained in more detail here .","title":"Select Peaklist File(s)"},{"location":"gui/#add-ms-files","text":"Individual files can be added to an in worklist using the ADD FILE(S) button. If the checkbox Add files from directory is checked, all files from a directory and its subdirectories are imported that end on mzXML or mzML . The box is checked by default. Note that files are always added to the worklist. The worklist can be cleared with the RESET button.","title":"Add MS-files"},{"location":"gui/#reset","text":"Clicking the RESET button will delete current results and remove all selected files.","title":"Reset"},{"location":"gui/#run","text":"The number of cores used for MINT can be selected with the Select number of cores slider. The maximum number shown here depends on the computer on which MINT is running. The RUN button starts mint and a progress bar monitors the progress and can be used to estimate the remaining time.","title":"Run"},{"location":"gui/#export","text":"Once generated Mint results can be exported by clicking on the EXPORT button. An Excel file is generated which is described in more detail here .","title":"Export"},{"location":"gui/#interactive-elements","text":"","title":"Interactive elements"},{"location":"gui/#interative-results-table","text":"","title":"Interative Results Table"},{"location":"gui/#heatmap-tool","text":"","title":"Heatmap Tool"},{"location":"install/","text":"Installation Download release (Windows 10) For Windows 10 a build is provided here . Simply, unpack the zip-archive and start Mint.exe . Then navigate to http://localhost:9999 if the browser does not open automatically. Installation with pip The program can be installed in a Python 3 (>= 3.7) environment using pip : pip install ms-mint Then the GUI can be started with Mint.py Then navigate to http://localhost:9999 if the browser does not open automatically. Installation from source Here we use conda from the miniconda package to install dependencies in a virtual environment. git clone https://github.com/soerendip/ms-mint cd ms-mint conda create -n ms-mint python=3.8 conda activate ms-mint pip setup.py install # for regular install pip install -e . # for development Launching the GUI The browser based GUI can then be started with conda activate ms-mint # if you run MINT in an Anaconda environment Mint.py Then navigate to the following ULR with your browser: http://localhost:9999/ . The graphical user interface is explained in more detail here","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#download-release-windows-10","text":"For Windows 10 a build is provided here . Simply, unpack the zip-archive and start Mint.exe . Then navigate to http://localhost:9999 if the browser does not open automatically.","title":"Download release (Windows 10)"},{"location":"install/#installation-with-pip","text":"The program can be installed in a Python 3 (>= 3.7) environment using pip : pip install ms-mint Then the GUI can be started with Mint.py Then navigate to http://localhost:9999 if the browser does not open automatically.","title":"Installation with pip"},{"location":"install/#installation-from-source","text":"Here we use conda from the miniconda package to install dependencies in a virtual environment. git clone https://github.com/soerendip/ms-mint cd ms-mint conda create -n ms-mint python=3.8 conda activate ms-mint pip setup.py install # for regular install pip install -e . # for development","title":"Installation from source"},{"location":"install/#launching-the-gui","text":"The browser based GUI can then be started with conda activate ms-mint # if you run MINT in an Anaconda environment Mint.py Then navigate to the following ULR with your browser: http://localhost:9999/ . The graphical user interface is explained in more detail here","title":"Launching the GUI"},{"location":"jupyter/","text":"Jupyter Integration Mint can be integrated in an interactive Jupyter Notebook environment with a GUI that is based on IPython-Widgets. The design follows the same principles as the browser based GUI from ms_mint import Mint from ms_mint.JupyterGUI import JupyterGUI mint = Mint(verbose=False) gui = JupyterGUI(mint) gui.show() That way the results will be readily available for further analysis and processing that is out of the scope of MINT . gui.results","title":"Jupyter"},{"location":"jupyter/#jupyter-integration","text":"Mint can be integrated in an interactive Jupyter Notebook environment with a GUI that is based on IPython-Widgets. The design follows the same principles as the browser based GUI from ms_mint import Mint from ms_mint.JupyterGUI import JupyterGUI mint = Mint(verbose=False) gui = JupyterGUI(mint) gui.show() That way the results will be readily available for further analysis and processing that is out of the scope of MINT . gui.results","title":"Jupyter Integration"},{"location":"peak_detection/","text":"Peak detection Peak detection is still an experimental feature. OpenMS's algorithm for peak detection in metabolomics data files 'FeatureFindingMetabo' is used. Peak detection happens in two steps. First, each selected file is scanned for potential peaks. Then similar peaks across multiple files are merged. No peak alignment is done. The feature maps that are internally stored in OpenMS format are then transformed to MINT peaklist format. The detected features often come from contaminations and additional scoring step is recommended to filter out low quality peak definitions. The controllable parameters for the detection algorithm are the minimum OpenMS peak quality and the maximum number of peaks per file. In the Jupter Notebook feature detection can be done as demonstrated in the following: %pylab inline from ms_mint.notebook import Mint from glob import glob mint = Mint() mint.show() mint.detect_peaks(min_quality=1e-3, condensed=True, max_delta_mz_ppm=10, max_delta_rt=0.1)","title":"Peak detection"},{"location":"peak_detection/#peak-detection","text":"Peak detection is still an experimental feature. OpenMS's algorithm for peak detection in metabolomics data files 'FeatureFindingMetabo' is used. Peak detection happens in two steps. First, each selected file is scanned for potential peaks. Then similar peaks across multiple files are merged. No peak alignment is done. The feature maps that are internally stored in OpenMS format are then transformed to MINT peaklist format. The detected features often come from contaminations and additional scoring step is recommended to filter out low quality peak definitions. The controllable parameters for the detection algorithm are the minimum OpenMS peak quality and the maximum number of peaks per file. In the Jupter Notebook feature detection can be done as demonstrated in the following: %pylab inline from ms_mint.notebook import Mint from glob import glob mint = Mint() mint.show() mint.detect_peaks(min_quality=1e-3, condensed=True, max_delta_mz_ppm=10, max_delta_rt=0.1)","title":"Peak detection"},{"location":"peaklists/","text":"Peaklists A peaklist contains the definitions of peaks to be extracted. It is the protocol that captures how data is going to be extracted from the MS-files. It is provided as csv (comma separated values) or xlsx (Microsoft Excel) file. Each row defines a peak-window. If a multi-sheet xlsx file can be used the peaklist should be the first sheet. A window is defined by five properties that need to be present as headers in the peaklist file: peak_label : A unique identifier such as the biomarker name or ID. Even if multiple peaklist files are used, the label have to be unique across all the files. mz_mean : The target mass (m/z-value) in [Da]. mz_width : The width of the peak in the m/z-dimension in units of ppm. The window will be mz_mean +/- (mz_width * mz_mean * 1e-6). Usually, a values between 5 and 10 are used. rt_min : The start of the retention time for each peak in [min]. rt_max : The end of the retention time for each peak in [min]. intensity_threshold : A threshold that is applied to filter noise for each window individually. Can be set to 0 or any positive value. Example file peaklist.csv: peak_label,mz_mean,mz_width,rt_min,rt_max,intensity_threshold Biomarker-A,151.0605,10,4.65,5.2,0 Biomarker-B,151.02585,10,4.18,4.53,0 A template can be created using the GUI .","title":"Peaklists"},{"location":"peaklists/#peaklists","text":"A peaklist contains the definitions of peaks to be extracted. It is the protocol that captures how data is going to be extracted from the MS-files. It is provided as csv (comma separated values) or xlsx (Microsoft Excel) file. Each row defines a peak-window. If a multi-sheet xlsx file can be used the peaklist should be the first sheet. A window is defined by five properties that need to be present as headers in the peaklist file: peak_label : A unique identifier such as the biomarker name or ID. Even if multiple peaklist files are used, the label have to be unique across all the files. mz_mean : The target mass (m/z-value) in [Da]. mz_width : The width of the peak in the m/z-dimension in units of ppm. The window will be mz_mean +/- (mz_width * mz_mean * 1e-6). Usually, a values between 5 and 10 are used. rt_min : The start of the retention time for each peak in [min]. rt_max : The end of the retention time for each peak in [min]. intensity_threshold : A threshold that is applied to filter noise for each window individually. Can be set to 0 or any positive value.","title":"Peaklists"},{"location":"peaklists/#example-file","text":"peaklist.csv: peak_label,mz_mean,mz_width,rt_min,rt_max,intensity_threshold Biomarker-A,151.0605,10,4.65,5.2,0 Biomarker-B,151.02585,10,4.18,4.53,0 A template can be created using the GUI .","title":"Example file"},{"location":"python/","text":"Python API The MINT API for Python can be imported as a python object and used in a python script or interactively in a Jupyter notebook environment. A typical workflow using the Python API is described in the following: from ms_mint import Mint from glob import glob Fist, the Mint class has to be instantiated: mint = Mint(verbose=False) Load files One ore more peaklist files as well as mass-spec files have to be assigned to mint.peaklist_files and mint.files accordingly: mint.peaklist_files = ['path_to/peaklist-file.csv'] mint.files = glob('path_to/ms-files/*/**.mzML', recursive=True) Calling the peaklist() method displays the imported and concatenated peaklists: print(mint.peaklist) peak_label mz_mean mz_width rt_min rt_max intensity_threshold peaklist 0 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 1 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 2 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv Running Mint Then mint can be executed calling the run() method: mint.run() > Run MINT > Total runtime: 6.18s > Runtime per file: 3.09s > Runtime per peak (79): 0.04s Results The result will be stored in the results and the crosstab attributes as pandas.DataFrames() . Where mint.results contains all results: print(mint.results) peak_label mz_mean mz_width rt_min rt_max intensity_threshold peaklist peak_area ms_file ms_path file_size intensity_sum 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 2.879748e+03 ./data/test.mzXML ./data 14.201964 5.607296e+10 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 4.892307e+05 ./data/test.mzXML ./data 14.201964 5.607296e+10 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3.916772e+07 ./data/test.mzXML ./data 14.201964 5.607296e+10 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv 6.862484e+06 ./data/test.mzXML ./data 14.201964 5.607296e+10 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 2.879748e+03 ./data/test.mzXML ./data 14.201964 5.607296e+10 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 4.892307e+05 ./data/test.mzXML ./data 14.201964 5.607296e+10 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3.916772e+07 ./data/test.mzXML ./data 14.201964 5.607296e+10 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv 6.862484e+06 ./data/test.mzXML ./data 14.201964 5.607296e+10 and crosstab() can shows a compressed form of the data only containing one property e.g. the extracted peak_area : ... Peak shapes The last property is mint.rt_projections which stores a dictionary of dictionaries with peak shapes: {'1': {'./data/test.mzXML': retentionTime 5.079267 2879.747559 dtype: float32}, '2': {'./data/test.mzXML': retentionTime 3.986050 15166.202148 3.996917 14039.182617 4.007817 15455.113281 4.018700 16612.851562 4.029633 22065.619141 4.040633 26693.970703 4.051533 22569.896484 4.062450 32379.552734 4.073567 27225.439453 4.084683 22142.037109 4.095867 22974.357422 4.106900 23733.207031 4.117917 25081.419922 4.128983 17945.343750 4.140200 14623.268555 4.151250 16119.997070 4.162317 15771.708008 4.173467 11171.838867 4.184517 12554.623047 ... Plotting peak shapes The peak shapes can be plotted with the same function that is used by the GUI's: from ms_mint.plotly_tools import plot_rt_projections plot_rt_projections(mint) Export Mint results can be exported using the export() method. A filename has to be provided: mint.export('MINT-results.xlsx') An Excel file with the results is exported. The file includes the data of all windows that were used as well as some metadata such as date and the current verion of Mint .","title":"Python"},{"location":"python/#python-api","text":"The MINT API for Python can be imported as a python object and used in a python script or interactively in a Jupyter notebook environment. A typical workflow using the Python API is described in the following: from ms_mint import Mint from glob import glob Fist, the Mint class has to be instantiated: mint = Mint(verbose=False)","title":"Python API"},{"location":"python/#load-files","text":"One ore more peaklist files as well as mass-spec files have to be assigned to mint.peaklist_files and mint.files accordingly: mint.peaklist_files = ['path_to/peaklist-file.csv'] mint.files = glob('path_to/ms-files/*/**.mzML', recursive=True) Calling the peaklist() method displays the imported and concatenated peaklists: print(mint.peaklist) peak_label mz_mean mz_width rt_min rt_max intensity_threshold peaklist 0 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 1 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 2 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv","title":"Load files"},{"location":"python/#running-mint","text":"Then mint can be executed calling the run() method: mint.run() > Run MINT > Total runtime: 6.18s > Runtime per file: 3.09s > Runtime per peak (79): 0.04s","title":"Running Mint"},{"location":"python/#results","text":"The result will be stored in the results and the crosstab attributes as pandas.DataFrames() . Where mint.results contains all results: print(mint.results) peak_label mz_mean mz_width rt_min rt_max intensity_threshold peaklist peak_area ms_file ms_path file_size intensity_sum 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 2.879748e+03 ./data/test.mzXML ./data 14.201964 5.607296e+10 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 4.892307e+05 ./data/test.mzXML ./data 14.201964 5.607296e+10 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3.916772e+07 ./data/test.mzXML ./data 14.201964 5.607296e+10 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv 6.862484e+06 ./data/test.mzXML ./data 14.201964 5.607296e+10 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 2.879748e+03 ./data/test.mzXML ./data 14.201964 5.607296e+10 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 4.892307e+05 ./data/test.mzXML ./data 14.201964 5.607296e+10 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3.916772e+07 ./data/test.mzXML ./data 14.201964 5.607296e+10 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv 6.862484e+06 ./data/test.mzXML ./data 14.201964 5.607296e+10 and crosstab() can shows a compressed form of the data only containing one property e.g. the extracted peak_area : ...","title":"Results"},{"location":"python/#peak-shapes","text":"The last property is mint.rt_projections which stores a dictionary of dictionaries with peak shapes: {'1': {'./data/test.mzXML': retentionTime 5.079267 2879.747559 dtype: float32}, '2': {'./data/test.mzXML': retentionTime 3.986050 15166.202148 3.996917 14039.182617 4.007817 15455.113281 4.018700 16612.851562 4.029633 22065.619141 4.040633 26693.970703 4.051533 22569.896484 4.062450 32379.552734 4.073567 27225.439453 4.084683 22142.037109 4.095867 22974.357422 4.106900 23733.207031 4.117917 25081.419922 4.128983 17945.343750 4.140200 14623.268555 4.151250 16119.997070 4.162317 15771.708008 4.173467 11171.838867 4.184517 12554.623047 ...","title":"Peak shapes"},{"location":"python/#plotting-peak-shapes","text":"The peak shapes can be plotted with the same function that is used by the GUI's: from ms_mint.plotly_tools import plot_rt_projections plot_rt_projections(mint)","title":"Plotting peak shapes"},{"location":"python/#export","text":"Mint results can be exported using the export() method. A filename has to be provided: mint.export('MINT-results.xlsx') An Excel file with the results is exported. The file includes the data of all windows that were used as well as some metadata such as date and the current verion of Mint .","title":"Export"}]}